# Stack

A stack is a linear data structure in which the insertion of new element and removal of an existing element takes place at the same end represented as the top of stack.

## Basic operation in stack

-> push() complexity of push is O(1).</br>
-> pop() complexity pop is O(1).</br>
-> top() complexity of top is O(1.)</br>
-> isEmpty() complexity of isEmpty is O(1).</br>
-> size() complexity of size is O(1).</br>

## Type of stacks

<dl>
  <dt>Fixed size stack</dt>
  <dd>
    <ul>
      <li>Cannot grow or shrink dynamically.</li>
      <li>When the stack is full push operation cannot be done when it done it will leads to stack overflow error.</li>
      <li>When the stack is empty pop operation cannot be done when it done it will leads to stack underflow error.</li>
    </ul>
  </dd>
  <dt>Dynamic size stack</dt>
  <dd>
    <ul>
      <li>Stack will grow or shrink dynamically.</li>
      <li>This dynamic stack can implemented through linked list.</li>
    </ul>
  </dd>
  <br>
  *These two are the main type of stack however there are variation od stack is also there. like :
  <dt>Infix to postfix stack</dt>
  <dd>Used to convert infix expression to postfix expression.</dd>
  <dt>Expression evaluation stack</dt>
  <dd>This type of stack used to evaluate postfix expression.</dd>
  <dt>Recursion Stack</dt>
  <dd>This type of stack is used to track a function call in computer program to return to current function after execution.</dd>
  <dt>undo redo stack</dt>
  <dd>To enable undo redo operation.</dd>
  <dt>Memory Management Stack</dt>
  <dd>This kind of stack is used to sore the values of program. This allow program return to actual state after the function returns.</dd>
  <dt>Balanced parenthesis stack</dt>
  <dd>This stack is used to check or to ensure the parenthesis are written currently. </dd>
</dl>